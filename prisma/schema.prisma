// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  slug        String    @unique
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relationships
  services    Service[]

  @@map("categories")
}

enum CloudProvider {
  AWS
  Azure
  GCP
  Other
}

model Service {
  id               Int            @id @default(autoincrement())
  name             String
  cloudProvider    CloudProvider  @map("cloud_provider")
  description      String?
  features         Json?          @db.JsonB 
  documentationUrl String?        @map("documentation_url")
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  // Foreign Key
  categoryId       Int            @map("category_id")
  
  // Relationships
  category         Category       @relation(fields: [categoryId], references: [id])
  sourceMappings   Mapping[]      @relation("SourceService")
  targetMappings   Mapping[]      @relation("TargetService")

  @@unique([name, cloudProvider])
  @@index([cloudProvider])
  @@index([categoryId])
  @@index([isActive])
  @@map("services")
}

enum MappingType {
  DIRECT
  COMPOSITE
  PARTIAL
  NO_EQUIVALENCE
}

model Mapping {
  id          Int          @id @default(autoincrement())
  mappingType MappingType  @map("mapping_type")
  confidence  Int          @default(0)
  caveats     String?
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Foreign Keys
  sourceServiceId  Int  @map("source_service_id")
  targetServiceId  Int  @map("target_service_id")

  // Relationships
  sourceService    Service @relation("SourceService", fields: [sourceServiceId], references: [id])
  targetService    Service @relation("TargetService", fields: [targetServiceId], references: [id])

  @@map("mappings")
  @@unique([sourceServiceId, targetServiceId])
  @@index([sourceServiceId])
  @@index([targetServiceId])
  @@index([isActive])
}